{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","components_Card","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","App","onSearchChange","event","searchfield","target","value","_this2","fetch","then","response","json","users","_this$state","filteredRobots","filter","robot","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_containers_App"],"mappings":"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","file":"static/js/main.913a3c4f.chunk.js","sourcesContent":["import React from 'react';\n\n// Displays each individual card, with a unique name, email, and robot ID.\nconst Card = ({ name, email, id }) => {\n    return (\n        <div className='tc bg-light-purple dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='photo' src={`https://robohash.org/${id}?size=200x200`} />\n            <div>\n                <h2>{ name }</h2>\n                <p>{ email }</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from \"react\";\nimport Card from \"./Card\"\n\nconst CardList = ({ robots }) => {\n\n/* Created a map of the Card List to implement all names in the robots.js\narray */\n        return (\n            <div>\n                {robots.map((user, i) => {\n            return <Card \n                key={i} \n                id={robots[i].id} \n                name={robots[i].name} \n                email={robots[i].email}/>\n             })}\n            </div>\n         );\n}\n\nexport default CardList;","import React from \"react\";\n\n// Creates the searchbox\nconst SearchBox = ({ searchChange }) => {\n    return (\n        <div className='pa2'>\n            <input \n            className='pa3 ba b--green bg-lightest-blue'\n            type='search' \n            placeholder='search robots'\n            onChange={searchChange} \n            />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from \"react\";\n\n/* Borders the SearchBox and Cards to make the Robofriends scrollable, while\nusing CardList as a child variable to implement the the Scroll function */\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', border: '5px solid black', height: '800px'}}>\n            { props.children } \n        </div>\n    )\n}\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true })\n    }\n\n    render() {\n        if (this.state.hasError === true) {\n            return <h1>Woops! That isn't good.</h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundary;\n","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport './App.css';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary'\n\n\n\n// Renders the App class to display the title & searchbox\nclass App extends Component {\n    constructor() {\n        super()\n        this.state = {\n            robots: [],\n            searchfield: ''\n        }\n    }\n\n// fetches the users from the JSON site\ncomponentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response=> response.json())\n      .then(users => {this.setState({ robots: users})});\n  }\n\n    onSearchChange = (event) => {\n        this.setState({ searchfield: event.target.value })\n    }\n\n// Filters the cards as the SearchBar is used\nrender() {\n    const { robots, searchfield } = this.state;\n\n// Uses alphabetical filtering as the Search is conducted\n    const filteredRobots = robots.filter(robot =>{\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n    })\n\n/* If the page takes longer than usual time, initialize a \"Loading\" screen.\nOtherwise, display the RoboFriends header with all the other components along\nwith it. */\n    return !robots.length ?\n      <h1>Loading</h1> :\n      (\n        <div className='tc'>\n          <h1 className='f1'>RoboFriends</h1>\n          <SearchBox searchChange={this.onSearchChange}/>\n          <Scroll>\n            <ErrorBoundary>\n                <CardList robots={filteredRobots} />\n            </ErrorBoundary>\n          </Scroll>\n        </div>\n      );\n  }\n}\n\n\n\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\n// Renders the App \nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}